<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                         "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<chapter id="TODO">
<title>Planned features</title>
<subtitle>Indicative roadmap of ADG features implementation</subtitle>

<para>The following list is roughly in reversed implementation order. All the
improvements must be reflected in the demo programs, where applicable.</para>

<simplesect id="TODO.unknown">
<title>Road to unknown</title>

<para>This is the collection of TODOs that could be applied also after the
1.0.0 version has been released. They are usually non-blocking and hard
to implement.</para>

<itemizedlist mark="circle">
   <listitem>Actually the AdgPath code is simplified to execute binary actions
   only when the two operands are properly defined primitives. Anyway
   those actions could be chained up in a lot of situations. For example,
   it is quite common to have a chamfer followed by a fillet.</listitem>
   <listitem>Add support for DXF format. Although the easiest approach would be to
   implement a new surface type directly into cairo, this would loose
   too much information (e.g. dimension grouping and association) so
   an ADG backend seems to be the only viable way. Look hard to see if
   <ulink url="https://github.com/bert/libdxf">libdxf</ulink> can be used.</listitem>
   <listitem>A binary action after a close-path primitive leaves the shape opened:
   closing and filleting results in a non-closed original shape.</listitem>
   <listitem override="disc">Hide the CPML APIs accessible from the CpmlPrimitive interface: use
   a private struct of function pointers to delegate the job to the
   different primitives.</listitem>
   <listitem>Check if the decentralization of the quote is applicable to the
   angular dimensions too and if it is worth the effort.</listitem>
   <listitem>The ARROW and TRIANGLE markers should follow the director path that
   could be a curve. Use the METAPOST solution suggested by John Hobby
   in its METAPOST manual, that is given <parameter>angle</parameter> and <parameter>size</parameter>, rotate the
   path by half <parameter>angle</parameter> in both directions, cut it with a circle centered
   at the end of the director path with radius <parameter>size</parameter> and close the
   resulting path (eventually filling it).</listitem>
   <listitem override="disc">Implement AdgText, a generic text management, using pango.</listitem>
   <listitem>Add a specialized GTK+ widget that allows the customization of the
   rendering process. This should be a tree widget that provides
   hierarchical access to AdgStyle and derived <emphasis>instances</emphasis> by
   inspecting an AdgCanvas object, in a way similar to what
   <ulink url="http://glade.gnome.org">glade</ulink> does with a GtkWindow. Add this
   widget to a new tab in the edit dialog of adg-demo to expose and
   test this new feature.</listitem>
   <listitem>Add self-intersection API for CPML segments.</listitem>
   <listitem>Add datum support: for implementation ideas checkout this
   <ulink url="http://nvlpubs.nist.gov/nistpubs/jres/104/4/html/j44mac.htm">draft</ulink>.</listitem>
   <listitem>The cairo library does not handle arcs natively. Actually the CPML
   library is able to transparently convert them to Bézier curves
   when needed. Add more logic to do the same in the reverse side,
   that is to automatically convert curves to arcs when a curve is
   close enough to an arc approximation. This will bring in a new
   information that can be used in some operation, such as getting
   the value to put in the quote of a radial dimension or offsetting
   a curved segment in a precise way.</listitem>
   <listitem>Improve Bézier offset approximation algorithm, possibly enabling
   the feature of splitting the offset curve in more than one Bézier
   arc when the error is not acceptable.</listitem>
   <listitem>Include a Lua shell in the Windows installer for interactively
   playing with the ADG canvas on that platform.</listitem>
</itemizedlist>

</simplesect>

<simplesect id="TODO.1.0.0">
<title>Road to adg-1.0.0</title>

<para>The commits to the 0.9 branch should be considered beta releases and are
supposed to solely improve stability. Addition to the API is still
possible though.</para>

<para>These releases should reach the wider audience, according to a niche
project such as the ADG canvas. This means each release should build
cleanly on different platforms such as FreeBSD and must be cross
compilable for Windows with MinGW.</para>

<itemizedlist mark="circle">
   <listitem override="disc">Ensure at least one big project is used successfully in production.</listitem>
   <listitem override="disc">Allow to phase out specific entities from extents computation. This
   is required in order to make tables and title blocks that should
   be fixed in global space.</listitem>
   <listitem override="disc">Improve the text generation for quotes, allowing
   different formatting, e.g. specific number of decimals and sexagesimal
   representation of angles.</listitem>
   <listitem override="disc">Remove all warnings generated by newer tools, specifically the ones
   generated by gtk-doc and by clang.</listitem>
   <listitem>Ensure no regressions have been introduced by the last commits.</listitem>
</itemizedlist>

</simplesect>

<simplesect id="TODO.0.9.0">
<title>Road to adg-0.9.0</title>

<para>The 0.8 branch should focus on improving the testing units and the
coverage report.</para>

<itemizedlist mark="disc">
   <listitem>Add full sanity checks, that is on every API that must supports it
   (all the GObject based APIs) ensure that feeding weird parameters
   does not make the library crash.</listitem>
   <listitem>Add support for test coverage, for example by leveraging the
   Coveralls service provided freely by GitHub.</listitem>
   <listitem>Instead of just providing a bunch of HTML file as documentation,
   include a single PDF file inside the Windows installer. This is
   also a more common convention in the Windows world.</listitem>
   <listitem>The Windows installer needs to include a minimum set of icons to
   let adg-demo run without warnings (e.g. the the + and - icons of
   a GtkSpinButton widget).</listitem>
</itemizedlist>

</simplesect>

<simplesect id="TODO.0.8.0">
<title>Road to adg-0.8.0</title>

<para>The commits in the 0.7 branch should be atomics, that is a successful
build will be added as a prerequisite for each commit, so bisecting
with "git bisect" should be usable. The API should be considered almost
frozen. This is a testing branch: the target is to reach a sufficient
quality level to make beta releases.</para>

<itemizedlist mark="disc">
   <listitem>Add a compilation prerequisite triggered by the commit hook, e.g.
   leverage the TravisCI service provided by GitHub.</listitem>
   <listitem>Check the test coverage by using gcov and eventually raise it to
   at least 90%.</listitem>
   <listitem>Add internationalization support to the installer: this includes also
   the possibility to select the installation of language packs.</listitem>
   <listitem>Improve the current internationalization support of the ADG: merge
   po-properties/ into po/ and get rid of glib-gettext. Check the gleak
   project for suggestions.</listitem>
   <listitem>Provide a complete set of bindings based on GObject introspection and
   develop a full-fledged adg-demo application with those bindings that
   does the same job of adg-demo.c, in the same way.</listitem>
   <listitem>Include a set of custom icons to visually differentiate the different
   actions triggered by the cpml-demo program.</listitem>
</itemizedlist>

</simplesect>

<simplesect id="TODO.0.7.0">
<title>Road to adg-0.7.0</title>

<para>The target of the 0.6 branch is to clean up the code and stabilize the
API: the 0.7.0 release will probably be a beta release.</para>

<itemizedlist mark="disc">
   <listitem>Add autoscaling to AdgCanvas. In other words, there must be a way
   to select a specific scale from a finite set of predefined factors
   depending on the current extents of the canvas.</listitem>
   <listitem>Actually AdgLineStyle can change color, width, cap, join, miter
   limit and antialiasing of a line. The only thing remaining is
   the possibility to customize the dashing of a dashed line.</listitem>
   <listitem>Provide a Windows installer (32 and 64 platforms) for the demo
   program to show what can be accomplished with the ADG canvas.</listitem>
   <listitem>Provide a document with API guidelines take it as the holy bible!
   All the APIs must comply with the rules of this document.</listitem>
   <listitem>Try to cross compile and build a windows binary package. Check out
   <ulink url="http://ricardo.ecn.wfu.edu/~cottrell/cross-gtk/">Allin suggestions</ulink>
   for hints.</listitem>
   <listitem>Add printing support with page setup based on GtkPrintOperation provided
   by GTK+ 2.10 (hence, always available if GTK+ support is enable).</listitem>
   <listitem>Uncomplete entities should fail gracefully instead of complaining for
   insufficient data. For example, a linear dimension without the
   needed pairs should simply not be rendered without warnings.
   This provides an easy way to implement optional machinings.</listitem>
   <listitem>Expose conventions used by ADG APIs: this is mainly needed to make clear
   getters must be considered read-only, also when returning non-const
   values (because object referencing is always allowed).</listitem>
   <listitem>Add italian localization.</listitem>
   <listitem>Implement AdgGtkLayout, a new GTK+ widget that adds scrolling
   capabilities to AdgGtkArea.</listitem>
   <listitem>Add a new tab to the edit dialog of adg-demo to change the content
   of the title block with custom labels.</listitem>
   <listitem>Implement a decent "make check" target, basing the check programs on
   the test framework of glib. Make this an optional feature, as this
   framework is based on the too young glib-2.16.0.</listitem>
   <listitem>Resolve the TODOs in the adg/ directory: the only missing logic
   should come from the CPML library (and there the TODO items are
   bound to the less common use cases).</listitem>
   <listitem>Add support for GTK+3, possibly adding an optional check at configure
   time and trying to keep the same codebase.</listitem>
   <listitem>Enhance the AdgRDim class by adding an alternative rendering when the
   "outside" property is enabled.</listitem>
   <listitem>Create a separate project called adg-lua to host the lua bindings for
   the ADG project. Provide a demo similar to adg-demo in lua.</listitem>
</itemizedlist>

</simplesect>

<simplesect id="TODO.0.6.0">
<title>Road to adg-0.6.0</title>

<para>The target of the 0.5 branch is to provide a usable canvas: with usable
it is meant a canvas that can generate fairly completed drawings. The
0.5.x releases leading up to 0.6.0 should add all the missing features
needed to generate this drawing.</para>

<itemizedlist mark="disc">
   <listitem>Implement adg_matrix_normalize() to get rid of the scaling component
   of a matrix: consider the point (0,0) and (1,1) on the identity matrix
   and force on the matrix to normalize a distance of 1.4142... between
   the same points by modifying only the xx and yy components.</listitem>
   <listitem>Move the custom get_local_matrix() inside AdgEntity and implement a
   common way to manage local matrix - entity interaction: for instance,
   if the model is rotated an AdgToyText should rotate accordling but not
   scale (usually, at least if it is not a text written on the model).</listitem>
   <listitem>Implement AdgMarker as an abstract entity: it will be the base class
   for arrows, ticks, squares, dots and so on.</listitem>
   <listitem>Implement AdgArrow as AdgMarker derived entity.</listitem>
   <listitem>Implement AdgArrowStyle directly inside the AdgDimStyle class and
   provides a way to customize the markers.</listitem>
   <listitem>Rework the style approach by detaching the slot and type concepts:
   rename slot to dress and let the door opened to future expansion by
   breaking the one style = one dress equation.</listitem>
   <listitem>Rewrite AdgLDim to use the new marker APIs instead of hardcoding the
   arrows and calling the deprecated rendering callbacks.</listitem>
   <listitem>Implement the extents infrastructure that computes the bounding box
   of the entities without rendering them.</listitem>
   <listitem>Implement the outside arrows in AdgLDim.</listitem>
   <listitem>Add AdgADim, the angular dimension.</listitem>
   <listitem>Implement AdgEdges, a model that computes the edges of an AdgTrail
   model and build a CpmlPath containing all the vertical edges.</listitem>
   <listitem>Add AdgRDim, the radial dimension.</listitem>
   <listitem>Rework styles by using GObject and properties.</listitem>
   <listitem>Implement an abstract AdgFillStyle, abstracting the cairo_pattern_t
   APIs and providing a way to customize filling, similar to what
   AdgLineStyle does for stroking.</listitem>
   <listitem>Add AdgRuledFill, an AdgFillStyle implementation that allows to fill
   with a serie of parallel lines with customizable angle and distance.</listitem>
   <listitem>Add AdgHatch, an entity very similar to AdgStroke but that uses
   cairo_fill() instead of cairo_stroke().</listitem>
   <listitem>Implement the extents also for the path so the AdgHatch entity can work
   reliable: check if it is better to add new code in CPML or to directly
   use the functions provided by cairo. (Implemented in CPML as the arc
   primitive is not native in cairo and it is the only one with some quirks
   in the extents computation)</listitem>
   <listitem>Add labeling feature to the models and let AdgDim and children points
   be expressed as references to those labeled points instead of using
   explicit coordinates.</listitem>
   <listitem>Add AdgTable, a container for AdgToyText in a framed environment.</listitem>
   <listitem>Add AdgTitleBlock, a complex entity in global space used to frame the
   sheet and show the general drawing data (title, scale, date and so on).</listitem>
   <listitem>The dressing feature needs more attention: they are still not well
   polished and always using the "dress" property will likely give name
   conflicts: a basic mangling is required.</listitem>
   <listitem>Allow the linear dimension to be decentralized by using the pos point
   as reference and using a dedicated enum instead of a three-state.</listitem>
   <listitem>Sanitize the ADG APIs: the public functions must cope with invalid
   arguments without segmentation faults (without crossing the limits of
   the C language and of the common sense).</listitem>
   <listitem>Provide a decent demo program to show the progress so far, including
   title block, hatches and various dimensions types: update the website
   with new (and hopefully more impressive) screenshots.</listitem>
</itemizedlist>

</simplesect>

<simplesect id="TODO.0.5.0">
<title>Road to adg-0.5.0</title>

<para>The target of the 0.4 branch is to build the base of the canvas:
few user visible changes but a quite stable base code. All the
main infrastructures should be in place.</para>

<itemizedlist mark="disc">
   <listitem>Develop a basic demo CPML program to visually check the results.</listitem>
   <listitem>Provide CPML APIs for accessing cairo paths and browse their segments
   (a contiguous line segment).</listitem>
   <listitem>Provide CPML APIs for accessing segments and browse their primitives
   (a single line / curve / close path).</listitem>
   <listitem>CPML APIs to offset cairo paths: specifically, a decent
   approximation for single Bézier curves must be implemented.</listitem>
   <listitem>Implement APIs to get intersection points between different primitives.</listitem>
   <listitem>Provide an abstract API (cpml_segment_intersection?) to compute the
   intersection points between two segments. To be evaluated the way to
   return the results (maybe using an argument to specify the maximum
   number of intersections to return).</listitem>
   <listitem>Generate documentation for CPML.</listitem>
   <listitem>Merge ldim and adg-demo into a single demo program, basing the user
   interface on GtkBuilder.</listitem>
   <listitem>Implement AdgModel as a bare empty class. Move the actual stuff in
   AdgTitleBlock.</listitem>
   <listitem>Add model-view interaction by providing signal propagation from AdgModel
   to the dependent entities, so when a data changes the entities will be
   automatically updated.</listitem>
   <listitem>Rename AdgPath to AdgStroke, being the latter a stroke representation
   of a single AdgPath.</listitem>
   <listitem>Implement AdgPath as an AdgModel derived class of a conceptual path.
   Any AdgPath instance could be referenced by one or more entities.</listitem>
   <listitem>Add arcs in CPML to transparently support, whenever possible, the
   conversion between arcs and Bézier curves.</listitem>
   <listitem>Add to AdgPath the basic functionality to build a path: basically a
   bunch of methods emulating the cairo path API but without the need of
   a yet instantiated cairo context.</listitem>
   <listitem>Add support for the CPML arc feature in AdgPath.</listitem>
   <listitem>Update the demo using the newly implemented AdgPath to deeply test the
   model/entity interaction.</listitem>
   <listitem>Add a chamfer operation to AdgPath.</listitem>
   <listitem>Add a fillet operation to AdgPath.</listitem>
   <listitem>Change the matrix entity API, using a cleaner approach.</listitem>
   <listitem>Move AdgTranslatable and AdgRotable directly inside AdgEntity.</listitem>
   <listitem>Ensure there are no bitfield flags, as they are not binding friendly.</listitem>
   <listitem>Change building scripts to get the GTK+ dependency optional.</listitem>
   <listitem>Add AdgGtkArea, a GtkDrawingArea that can accept an AdgCanvas.</listitem>
   <listitem>Optimize the implemented entities applying the 0.4 ADG infractrusture
   and enable caching where applicable.</listitem>
   <listitem>Use AdgToyText to draw dimenstion quote where applicable.</listitem>
   <listitem>Add a "beyond" property to AdgDimStyle to be used when extending the
   baseline beyond the extension lines. If not specified, it must default
   to 3 x arrow size.</listitem>
   <listitem>Add a three-state enum to adg-enums.h: ADG_THREE_STATE_OFF,
   ADG_THREE_STATE_ON and ADG_THREE_STATE_UNKNOWN.</listitem>
   <listitem>Add the three-state "outside" property to allow forcing an outside quote.
   In the default state, the outside must be decided by the space between
   the extension lines: if greather than 3 x arrow size => inside arrows.</listitem>
</itemizedlist>

</simplesect>

<simplesect id="TODO.0.4.0">
<title>Road to adg-0.4.0</title>

<para>The target for the 0.3 branch is to give a shape to the project: build
system, docs and a bunch of (probably temporary) basic classes should
be enough to give a direction.</para>

<itemizedlist mark="disc">
   <listitem>Split mathematic stuff in its own library. It will be called CPML,
   that is Cairo Path Manipulation Library.</listitem>
   <listitem>Avoid wrapping of cairo APIs in AdgPath.</listitem>
   <listitem>Implement AdgToyText, a basic text entity using the cairo "toy" text API.</listitem>
   <listitem>Implement AdgTranslatable, a shared interface for entities that
   can be translated.</listitem>
   <listitem>Implement AdgRotable, a shared interface for entities that can be rotated.</listitem>
</itemizedlist>

</simplesect>

</chapter>
